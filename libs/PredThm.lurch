include libs/PropThm
////////////////////////////////
// ND Predicate Logic Theorems
////////////////////////////////

// Notes:
//
// * symmetry and transitivity of equality is inefficient and mainly
//   useful for the alternate substitutions rule, and they aren't needed because 
//   you basically get both for free between the substitution and alternate 
//   substitution rules
// * commutative of ∀ and ∃ rules are probably more efficiently handled with
//   something like (∀ x y, (@ P x y)) vs (∀ y x, (@ P x y)) but it's not clear
//   the best way to do that in practice yet
// * update: we now have the EquationsRule.  This may supercede
//   substitution and reflexive of equality. 
//   TODO: make more test examples to check this.

Rules: 
{ 
  // :{ :(= x y) (= y x) }               // symmetry of equality
  // :{ :(= x y) :(= y z) (= x z) }      // transitivity of equality
  :{ :x=y :𝜆P(y) 𝜆P(x) }                 // alternate substutition
  // :( :(∀x. (∀y. (@ P x y))) (∀y. (∀x. (@ P x y))) }    // commutativity
  // :( :(∃x. (∃y. (@ P x y))) (∃y. (∃x. (@ P x y))) }    // commutativity
  :{ { (∀x.𝜆P(x)) (∀y.𝜆Q(y)) } ≡ (∀x.𝜆P(x) and 𝜆Q(x)) }   // distributivity
  :{ { (∃x.𝜆P(x)) (∃y.𝜆Q(y)) } ≡ (∃x.𝜆P(x) or 𝜆Q(x)) }    // distributivity
  :{ (∃!x.𝜆W(x)) ≡ (∃c.∀z.𝜆W(z) ⇔ z=c) }  // alternate def of ∃!
} 