////////////////////////////////////////////////////////////////////
// Tests for Peggy Parser
//

{
// Misc parsing tests
// Symbols
x
x1
fred
// Numbers
0
1
12345
10200
0.5
12.0
12.0340
// function applications
f()
fred(x)
g0(fred,wilma)
f(x)(y)
f()(x,y)
f()()(x)
f(x,y)(a,b)(c,d,e)()
f⁻(x)
f⁻(f(x))
// parentheticals
(x)
(0)
(1.2)
((x))
(((x)))
((((((x))))))
// powers
2^3
0^10.3
x^0
x^y
(x^y)^z
x^(y^(z^w))
(x^(y^z))^w
(x^y)^(z^w)
(x^(y^z))^w
// products
x cdot y
2 cdot x
2 cdot 0
0 cdot 2
3 cdot x^2
3 cdot x^(2^3)
3^2 cdot 5^3 cdot 7^4
2 cdot x cdot y cdot z
2 cdot x^3 cdot y cdot z^4
(2 cdot x^3) cdot (y cdot z^4)
2 cdot (x^3 cdot (y cdot z^4))
(2 cdot (x^3 cdot y) cdot z)^4
2 cdot (x^3 cdot y) cdot z^4
// quotients
x/y
2/x
2/0
0/2
3/x^2
3/x^(2^3)
3^2/5^3 cdot 7^4
3^2 cdot 5^3/7^4
3^2/5^3/7^4
2 cdot x cdot y cdot z
2/x cdot y cdot z
2 cdot x/y cdot z
2 cdot x cdot y/z
2 cdot x/y/z
2/x cdot y/z
2/x/y cdot z
2/x/y/z
2 cdot x^3/y/z^4
(2 cdot x^3)/(y cdot z^4)
2 cdot (x^3/(y cdot z^4))
(2/(x^3/y) cdot z)^4
2 cdot (x^3 cdot y)/z^4
// multiplicative inverses
x⁻
x⋅x⁻
(x+1)⁻
(2⋅x⁻+1⁻)⁻
// sums
x+y
2+x
2+0
0+2
3+x^2
3+x^(2^3)
3+5^3+7^4
3^2+5^3+7^4
3^2+5 cdot 3/7+4
2+x+y+z
2+3 cdot x^3+y/z^4
(2+x^3)+(1+y cdot z^4)
2+(x^3/(y cdot z^4))
(2/(x+3/y) cdot z)^4
2 cdot (x^3+y)/z+4
// negation and subtraction
-x
-2
-0
0-2
3-x^2
3-x^(2^3)
3-5^3-7^4
-3^2+5^3-7^4
-3^2-5 cdot 3/7-4
2+x+y+z
2+3 cdot x^3+y/z^4
(2+x^3)-(1-y cdot z^4)
-2-(x-3/(yz^4))
(2/(x-3/y) cdot z)^(-4)
-2 cdot (x^3+y)/(-z)-4
// factorials
// n!
// (n+1)!+2
// 2+n!
// sets
A cap B
A cup B
A setminus B
A°
A cap B cap C
A cap (B cap C)
(A cap B) cap C
((A cap B) cap C) cap D
(A cap (B cap C)) cap D
A cap (B cup C)
(A cap B) cup C
((A cup B) cap C) cup D
(A cup (B cap C)) cup D
(A cup (B cap C)) cap D
A cup B cup C
A cup (B cup C)
(A° cap B°)° cap C°
(((A setminus B)° cap C°) cap D)°
(A° cap (B setminus C)) setminus D°
A cap (B° setminus C°)°
(A cap B) setminus C
((A setminus B) cap C) cup D
A setminus B setminus C setminus D
(A° cup (B setminus C°)) cap D
A times B  subset  B times A
// arithmetic relations
x=0
fred lt wilma
x+1 leq 0
(-(-x^2+2 cdot x-7)/((x-1) cdot (x+1))=(3 cdot x+1)/2)
2|6
12|24
n|6
k+1|n-1
Fred loves wilma
// set relations
x in A
2 in Set(0,2,4,6)
x ∈ A
2 ∈ Set(0,2,4,6)
x ∉ A
2 ∉ Set(0,2,4,6)

A subset B
Set(1,2) in PowerSet(Set(0,1,2,3))
A cap B  subset  A cup B
A cap B°  subset  (A cup B)° setminus A
// propositions
not P
not P or Q
not (P or Q)
not P and Q
not (P and Q)
not P∨Q
not (P∨Q)
not P∧Q
not (P∧Q)
not P  implies  Q
not (P  implies  Q)
not P  iff   Q
not (P  iff   Q)
((P implies Q) implies P) implies P
(((P implies Q) implies P) implies P)
not P and Q  implies  not R or S  iff   not T  implies  U
// mixed
x in (A cap B)°  iff   x in A° or x in B°
1/(x^2-2 cdot x+1)=1/(x-1)^2  iff   x in R and not x=1
//bindings
forall x.P(x)
exists x.P(x)
forall x.for all y.P(x)
exists x.exists y.P(x)
for all x.exists y.P(x)
exists x.for all y.P(x)
for all x.y.P(x)
exists x.y.P(x)
(exists x.for all y.P(x,y))  implies  (for all y.exists x.P(x,y))
(exists x.for all y.x loves y)  implies  (for all y.exists x.x loves y)
P and (exists x.P(x)  implies  Q)  implies  P and (for all y.Q)
// declarations
Let x
let x,y,z,wilma
Declare f
declare fred wilma barney !
P(c) for some c
P(c,w)  implies  Q(c,y) for some c
// environments
{}
{{{{{}}}}}
{ A }
{A B C}
{ Assume X Y }
{ :X Y }
{ :{:X Y} {:X Z} }
{ :{:{:P Q} P} P }
{ Assume { Assume { Assume P Q} P} P }
:{ :(x+1) cdot (x-1) leq 0 x leq 1 -1 leq x }
// attributed environments
Rule: { :A B⇒A }
  
////////////////////////////////
// ND Propositional Logic Axioms
////////////////////////////////
:{ {W V} ≡ W and V }                     // and+
:{ {:W V} ≡ W implies V }                // implies 
:{ { {:W V} {:V W} } ≡ W iff  V }        // iff  
:{ :W W or V V or W }                    // or+ 
:{ :W or V :{:W U} :{:V U} U }           // or-
:{ :{:W contradiction }  not W }         // not +
:{ :{:not W contradiction }  W }         // not -
:{ :W :not W contradiction }             // contradiction+
// Prop Thms
:{ W or not W }                                   // exclusive middle
:{ not (not W) ≡ W }                              // double negative
:{ W or W ≡ W }                                   // idempotency of or
:{ :W or V   V or W }                             // commutativity of or
:{ (W or V) or U ≡ W or (V or U) }                // associativity of or
:{ { W  (V or U) } ≡ (W and V) or (W and U) }     // distributivity of and/or
:{  W or (V and U) ≡ { (W or V) (W or U) } }      // distributivity of or/and
:{ :W implies V :V implies U W implies U }        // transitivity of  implies 
:{ :W iff  V :V iff  U W iff  U }                 // transitivity of  iff  
:{ W implies V ≡ not W or V }                     // alternate def of  implies 
:{ :W or V :not W V }                             // alternate or-  
:{ :W or V :not V W }                             // alternate or-
:{ not (W implies V) ≡ { W not V } }              // negated implication
:{ W  implies  V ≡  not V  implies  not W }       // contrapositive
:{ not (W and V) ≡ not W or not V }               // DeMorgan
:{ (not (W or V)) ≡ { not W not V } }             // DeMorgan
:{ :contradiction  W }                            // contradiction-
// Pred Axioms
:{ :(for all x.𝜆P(x)) 𝜆P(t) }                     // for all -
:{ :{ :Let x 𝜆P(x) }  (for all y.𝜆P(y)) }         // for all +
:{ :(exists x.𝜆P(x)) 𝜆P(c) for some c }           // exists -
:{ :𝜆P(t) (exists x.𝜆P(x)) }                      // exists +
:{ :x=y :𝜆P(x) 𝜆P(y) }                            // substitution
:{ W=W }                                          // reflexive =
:{ (exists unique x.𝜆P(x)) ≡ 
	 { (exists x.𝜆P(x)) (for all y.𝜆P(y) implies y=x) } }  // exists unique  
// Pred Theorems
:{ :x=y :𝜆P(y) 𝜆P(x) }                          // alternate substutition
:{ { (for all x. 𝜆P(x)) (for all y.𝜆Q(y)) } ≡ 
     (for all x. 𝜆P(x) and 𝜆Q(x)) }             // distributivity
:{ { (exists x. 𝜆P(x)) (exists y.𝜆Q(y)) } ≡ 
     (exists x. 𝜆P(x) or 𝜆Q(x)) }               // distributivity
:{ (exists unique x.𝜆W(x)) ≡ 
	 (exists c.for all z. 𝜆W(z)  iff  z=c) }      // alternate def of exists unique  
////////////////////////////////
// Peano Axioms
////////////////////////////////
:{ :sigma(m)=sigma(n) m=n }                                         // N2
:{ not (0 = sigma(n)) }                                             // N3
:{ :𝜆P(0) :{ :Let k :𝜆P(k) 𝜆P(sigma(k)) } (for all n.𝜆P(n)) }   // N4
:{ n+0 = n }                                                        // A0
:{ m+sigma(n) = sigma(m+n) }                                        // A1
:{ n cdot 0 = 0 }                                                   // M0
:{ n cdot sigma(m) = m+m cdot n }                                   // M1       
:{ m leq n ≡ (exists k.m+k=n) }                                     // I
///////////////////////////////
// tuples
⟨x⟩
⟨x,y,z⟩
// maps
f:A→B
f:A → B
f: A → B
f : A → B
f(0):A∩B → A∪B°
f:NN → NN
f⁻:A→B

// relations
x~y
x ~ y
a~(b+1)~c~d^2
a ≅ b mod m
a+k ≅ b-3 mod m

// misc
∀y.𝜆P(y) ⇒ y=x

{
  // Assignment #8 (b)
  { 
    Declare 0 lt 7
    {  
      Assume 0 lt 7
      exists x.0 lt x
      exists x.x lt 7
      (exists x.0 lt x) and (exists x.x lt 7)
    }
    0 lt 7  implies  (exists x.0 lt x) and (exists x.x lt 7)
  }
}

{
  // Assignment #8 (d)
  { { Assume x=y and y=z
      x=y
      y=z
      x=z      // by substitution
    }
    x=y and y=z  implies  x=z
  }
}

{
  // Assignment #8 (c)
  // Theorem: If everyone loves everyone else then Alice loves Bob.
  { Declare Alice, Bob
    { Assume for all x.for all y.x loves y
      for all y.Alice loves y 
      Alice loves Bob
    }
    (for all x.for all y.x loves y)  implies  Alice loves Bob
  }
}

{
  // Assignment #8 (e)
  { 
    { Assume exists x. P(x)  implies  Q(x)
      P(c) implies Q(c) for some c
      { Assume for all y. P(y)
        P(c)
        Q(c)
        exists z. Q(z)
      }
      (for all y. P(y)) implies (exists z. Q(z))
    }
    (exists x. P(x) implies Q(x))  implies  ( (for all y. P(y))  implies  (exists z. Q(z)) )
  }
}

// Assignment #5(b) not P or Q  implies  (P  implies  Q)
{ 
  { :not P or Q
    { :not P 
      { :P { :not Q contradiction } Q } 
      P implies Q
    }
    { :Q
      {:P Q}
      P implies Q
    } 
    P implies Q
  }
  (not P or Q)  implies  (P implies Q)
}

// Assignment #8 (f)
{
  // Theorem: If everyone loves exactly one person, and Alice and Bob
  // are not the same person, then Cathy does not love them both."
  {
    :(for all x.(exists unique y.x loves y)) :not (Alice=Bob)  not ((Cathy loves Alice) and (Cathy loves Bob))
  }
  // Proof:
  { 
    :(for all x.(exists unique y.x loves y))   // given
    :not (Alice=Bob)           // given
    //  "Use for all - on that using the free 'Cathy' in the theorem...")
    exists unique y.Cathy loves y
    //  "Apply the definition of exists unique   ...")
    exists y.Cathy loves y and (for all z.Cathy loves z  implies  z = y)
    //  "Cathy loves exactly one person, so let's name him Fred ...")
    Cathy loves Fred and (for all z.Cathy loves z  implies  z = Fred) for some Fred
    //  "Use and- twice on the body of that declaration...")
    Cathy loves Fred
    for all z.Cathy loves z  implies  z = Fred
    //  "Now it's just a short a proof by contradiction...")
    { :Cathy loves Alice and Cathy loves Bob
      Cathy loves Alice
      Cathy loves Bob
      Cathy loves Alice  implies  Alice=Fred
      Cathy loves Bob  implies  Bob=Fred
      Alice=Fred
      Bob=Fred
      Alice = Bob
      contradiction   
    }
    //  "Thus since the assumption led to a contradiction ...")
    not (Cathy loves Alice and Cathy loves Bob) 
  }
}

{
  //  "Theorem 7.2: n≠0  implies  exists m,n=sigma(m)")
  { :not n=0 (exists m.n=sigma(m)) }

  //  "Proof:")
  { :not n=0
    //  "P(n) is n≠0 implies exists k,n=sigma(m)")
    //  "Base Case")
    { :not 0=0
      { :not (exists m.0=sigma(m))
        0=0
        contradiction   
      }
      exists m.0=sigma(m)
    }
    not 0=0  implies  (exists m.0=sigma(m))
    // "Inductive step")
    { :Let k // be arbitrary
      { :not k=0  implies  (exists m.k=sigma(m))
        { :not sigma(k)=0 
          sigma(k)=sigma(k)
          exists m.sigma(k)=sigma(m)
        }
        not sigma(k)=0  implies  (exists m.sigma(k)=sigma(m))
      } 
    }
    //  "It would be nice to avoid the need for for all  and  implies  in this proof.")
    //  "But (𝜆 P n) only matches expressions")
    (for all j. not j=0 implies (exists m.j=sigma(m)))
    (not n=0  implies  (exists m.n=sigma(m)))
    (exists m.n=sigma(m))
  }
}

{
  // Assignment #9.1
  // Thm: Pierce's Law
  { ((P implies Q) implies P) implies P }
  { 
    :((P implies Q) implies P)
    { :not P
      { :P
        { :not Q 
          contradiction  
        }
        Q
      }
      P implies Q
      P
      contradiction  
    }
    P   
  }
}

{
  // BIH
  Recall { "This is a BIH" }
  Comment "This is a comment"
  ➤ "This is a comment"
  // Theorems
  Theorem { ImAtheorem }
  Lemma: { SoAmI }
  Thm { MeToo }
  Corollary { AndMe }
}

Rules: {
  { :P P }
  { :Q Q }
}

}