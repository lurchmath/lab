////////////////////////////////////////////////
//
// Acid Test Lib
//

// Global Constants
Declare and, or, ⇒, ⇔, ¬, →←, ∀, ∃, =, ∃!, 1, 2, 3, <, ∈, ⊆

Rules: {
  //////////////////////////////////////////////
  // ND Propositional Logic Axioms            //
  //////////////////////////////////////////////
  :{ {W V} ≡ W and V }                        // and+
  :{ {:W V} ≡ W ⇒ V }                         // ⇒
  :{ { {:W V} {:V W} } ≡ W ⇔ V }              // ⇔
  :{ :W (W or V) (V or W) }                   // or+ 
  :{ :(W or V) :{:W U} :{:V U}  U }           // or-
  :{ :{:W →←}  not W }                        // ¬+
  :{ :{:(not W) →←}  W }                      // ¬-
  :{ :W :(not W) →← }                         // →←+
  ///////////////////////////////////////////
  // ND Predicate Logic w/ = Axioms        //
  ///////////////////////////////////////////  
  :{ :∀x.𝜆P(x)  𝜆P(t) }                       // ∀-
  :{ :{ :Let x  𝜆P(x) }  ∀y.𝜆P(y) }           // ∀+
  :{ :∃x.𝜆P(x)  𝜆P(c) for some c }            // ∃-
  :{ :𝜆P(t) ∃x.𝜆P(x) }                        // ∃+
  :{ :x=y :𝜆P(x) 𝜆P(y) }                      // substitution
  :{ W = W }                                  // reflexive =
  //////////////////////////////////////////////
  // Additional Axioms                        //      
  //////////////////////////////////////////////    
  :{ 1<2 } :{ 2<3 }                           // some number facts
  :{:W<V :V<U W<U }                           // transitivity of <
  :{ :{ :Let x :x∈W  x∈V } W⊆V }              // ⊆+
  //////////////////////////////////////////////
  // Induction
  //////////////////////////////////////////////
  :{ :𝜆P(0)
     :{ :Let k such that 𝜆P(k) 
        𝜆P(𝜎(k)) 
     } 
     ∀n.𝜆P(n) 
  }
}