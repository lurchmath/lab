////////////////////////////////////////////////
//
// Acid Test Lib
//

{ 
  // Global Constants
  :[ and or ⇒ ⇔ ¬ →← ∀ ∃ = ∃! 1 2 3 < ∈ ⊆ ]
    
  //////////////////////////////////////////////
  // ND Propositional Logic Axioms            //
  //////////////////////////////////////////////
  :{ {W V} ≡ (and W V) }                      // and+
  :{ {:W V} ≡ (⇒ W V) }                       // ⇒
  :{ { {:W V} {:V W} } ≡ (⇔ W V) }            // ⇔
  :{ :W (or W V) (or V W) }                   // or+ 
  :{ :(or W V) :{:W U} :{:V U}  U }           // or-
  :{ :{:W →←}  (¬ W) }                        // ¬+
  :{ :{:(¬ W) →←}  W }                        // ¬-
  :{ :W :(¬ W) →← }                           // →←+
  //////////////////////////////////////////////
  // ND Predicate Logic w/ = Axioms           //
  //////////////////////////////////////////////  
  :{ :(∀ x,(@ P x)) (@ P t) }                 // ∀-
  :{ :{ :[x] (@ P x) }  (∀ y, (@ P y)) }      // ∀+
  :{ :(∃ x,(@ P x)) [c,(@ P c)] }             // ∃-
  :{ :(@ P t) (∃ x,(@ P x)) }                 // ∃+
  :{ :(= x y) :(@ P x) (@ P y) }              // substitution
  :{ (= W W) }                                // reflexive =
  //////////////////////////////////////////////
  // Additional Axioms                        //      
  //////////////////////////////////////////////    
  :{ (< 1 2) } :{ (< 2 3) }                   // some number facts
  :{:(< W V) :(< V U) (< W U) }               // transitivity of <
  :{ :{ :[ x ] :(∈ x W) (∈ x V) } (⊆ W V) }   // ⊆+
  //////////////////////////////////////////////
  // Induction
  //////////////////////////////////////////////
  :{ :(@ P 0) 
     :{ :[k, (@ P k) ]
        (@ P (𝜎 k)) 
     } 
     (∀ n , (@ P n)) 
  }
}