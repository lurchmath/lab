include libs/Functions
////////////////////////////////////////////////////////////////////////////
// Relations Lurch Lib
//

//////////////////////////////////
// Definitions for Relations
//////////////////////////////////
Declare ~, ‚âà, reflexive, symmetric, transitive, irreflexive, antisymmetric 
Declare total, class, partial order,  strict partial order,  total order
Declare equivalence relation, partition
Definitions:  
{
	:{ x~y ‚â° ‚ü®x,y‚ü©‚àà'~' }                          // infix vs set of tuples
	// The following rule is not necessary because the parser translates both x~y
	// and '~'(x,y) to the exact same thing.
	// :{ x~y ‚â° '~'(x,y)  }                       // infix vs prefix
	:{ :'~' is reflexive  x~x          } // reflexive
	:{ :{ Let x   x~x }   '~' is reflexive      } // reflexive
	:{ :'~' is symmetric  :x~y   y~x            } // symmetric
	:{ :{ Let x,y such that x~y  y~x }   '~' is symmetric  } // symmetric
	:{ :'~' is transitive  :x~y  :y~z x~z       } // transitive
	:{ :{ Let x,y,z such that x~y and y~z   x~z }   '~' is transitive  } // transitive

  // equivalence relation
	:{ '~' is an equivalence relation ‚â° 
	   '~' is reflexive '~' is symmetric  '~' is transitive  }
	:{ x‚àà[a] ‚â° x~a } // equivalence class

  // congruence mod m
  :{ a ‚âà b mod m  ‚â°  m | a-b } 
  
	// partition TODO: after doing indexed union
  // :{ :P is a partition of A  P‚äÜùí´(A) ‚à™P=A {:s‚ààA :t‚ààA s‚à©t=Set() or s=t } }

	// order
	:{ :'~' is irreflexive   ¬¨ x~x              } // irreflexive
	:{ :{ Let x   ¬¨ x~x }   '~' is irreflexive  } // irreflexive
	:{ :'~' is antisymmetric :x~y :y~x   x=y    } // antisymmetric
	:{ :{ Let x,y such that x~y and y~x  x=y }  '~' is antisymmetric  } // antisymmetric
	:{ :'~' is total     x~y or y~x             } // total
	:{ :{ Let x,y   x~y or y~x }  '~' is total  } // total
	
	:{ '~' is a partial order ‚â°                   // partial order
	   '~' is reflexive  
		 '~' is antisymmetric  
		 '~' is transitive  } 
	:{ '~' is a strict partial order ‚â°            // strict partial order
	   '~' is irreflexive  
		 '~' is antisymmetric  
		 '~' is transitive  }
	:{ '~' is a total order ‚â°                     // total order
	   '~' is antisymmetric  
		 '~' is transitive  
	   '~' is total }

} 