include libs/Pred
//////////////////////////////////
// ND Propositional Logic Theorems
//////////////////////////////////

// We comment out some of these for efficiency, since 'and' and '⇒' and to an 
// extent ⇔ are all 'built-in' to the notation of an LC, and thus rules 
// involving their formal properties are not as useful in this new setting.
Rules:
{ 
  :{ W or ¬W }                                  // exclusive middle
  :{ ¬(¬W) ≡ W }                                // double negative
  :{ W and W ≡ W }                              // idempotency of and
  :{ W or W ≡ W }                               // idempotency of or
  // :{ :(and W V) (and V W) }                  // commutativity of and
  :{ :W or V   V or W }                         // commutativity of or
  // :{ :(⇔ W V) (⇔ V W) }                      // commutativity of ⇔
  // :{ (and (and W V) U) ≡ (and W (and V U)) } // associativity of and
  :{ (W or V) or U ≡  W or (V or U)  }          // associativity of or
  :{ (W⇔V)⇔U ≡ W⇔(V⇔U) }                        // associativity of ⇔
  :{ { W (V or U) } ≡ (W and V) or (W and U) }  // distributivity of and/or
  :{ W or (V and U) ≡ { (W or V) (W or U) } }   // distributivity of or/and
  :{ :(W ⇒ V) :(V ⇒ U) (W ⇒ U) }                // transitivity of ⇒
  :{ :(W ⇔ V) :(V ⇔ U) (W ⇔ U) }                // transitivity of ⇔
  :{ W ⇒ V ≡ ¬W or V }                          // alternate def of ⇒
  :{ :W or V :¬W   V }                          // alternate or-  
  :{ :W or V :¬V   W }                          // alternate or-
  :{ ¬(W ⇒ V) ≡ { W ¬V } }                      // negated implication
  :{ W ⇒ V ≡ ¬V ⇒ ¬W }                          // contrapositive
  :{ ¬(W and V) ≡ ¬W or ¬V }                    // DeMorgan
  :{ ¬(W or V)  ≡ { ¬W ¬V } }                   // DeMorgan
  :{ :→← W }                                    // contradiction-
}